@page "/catalogo"
@using MauiBlazorDelivery.Services
@inject AuthService Auth
@inject NavigationManager Nav
@inject ClienteService ClienteSvc

<h2 class="mb-2 page-title">Catálogo</h2>

<!-- Barra STICKY: empieza debajo del título y luego queda pegada al hacer scroll -->
<div class="client-actions-sticky">
    <div class="client-actions-inner">
        <button class="btn btn-edit-orange" @onclick="VerCarrito">Ver Carrito</button>
        <button class="btn btn-gradient-orange" @onclick="VerPedidos">Mis pedidos</button>
    </div>
</div>

@if (_cargando)
{
    <div class="d-flex justify-content-center my-4">
        <div class="spinner-border" role="status"><span class="visually-hidden">Cargando...</span></div>
    </div>
}
else
{
    <div class="catalog-grid mt-3">
        @foreach (var p in _productos)
        {
            <div class="product-card">
                <div class="product-img">
                    <img src="@(string.IsNullOrWhiteSpace(p.ImagenUrl) ? "/images/no-image.png" : p.ImagenUrl)"
                         alt="@p.NombreProducto"
                         loading="lazy"
                         onerror="this.onerror=null;this.src='/images/no-image.png'" />
                </div>

                <div class="product-body">
                    <h5 class="product-title">@p.NombreProducto</h5>
                    <p class="product-desc">@p.Descripcion</p>
                    <div class="product-price">$ @p.Precio.ToString("N2")</div>

                    <div class="product-actions">
                        <input type="number"
                               min="1"
                               step="1"
                               class="form-control"
                               value="@GetCant(p.IdProducto)"
                               @onchange="(e => OnCantChange(p.IdProducto, e))" />

                        <button class="btn btn-gradient-green"
                                @onclick="() => AgregarAlCarrito(p)">
                            Agregar al Carrito
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="catalog-footer-actions mt-4 footer-safe-pad">
        <button class="btn btn-gradient-red btn-full" @onclick="CerrarSesion">Cerrar sesión</button>
    </div>
}

@if (_mostrarToast)
{
    <div class="app-toast">
        <div class="app-toast-body">
            <div class="app-toast-title">Éxito</div>
            @_toastText
        </div>
        <button class="app-toast-close" @onclick="CerrarToast">×</button>
    </div>
}

@code {
    private bool _cargando = true;
    private List<ClienteService.ProductoDto> _productos = new();
    private readonly Dictionary<int, int> _cantidades = new();

    private bool _mostrarToast;
    private string _toastText = "OK";
    private System.Timers.Timer? _toastTimer;

    protected override async Task OnInitializedAsync()
    {
        if (!Auth.EstaLogueado || Auth.EsAdmin)
        {
            Nav.NavigateTo("/login");
            return;
        }

        try
        {
            _productos = await ClienteSvc.GetCatalogoAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            _productos = new();
            MostrarToast("No se pudo cargar el catálogo.");
        }
        finally
        {
            _cargando = false;
        }
    }

    private int GetCant(int id)
    {
        if (!_cantidades.TryGetValue(id, out var c) || c < 1) c = 1;
        return c;
    }

    private void OnCantChange(int id, ChangeEventArgs e)
    {
        if (!int.TryParse(e?.Value?.ToString(), out var v) || v < 1) v = 1;
        _cantidades[id] = v;
        StateHasChanged();
    }

    private async Task AgregarAlCarrito(ClienteService.ProductoDto p)
    {
        var cant = GetCant(p.IdProducto);
        var ok = await ClienteSvc.AgregarAlCarritoAsync(Auth.IdUsuario, p.IdProducto, cant);
        MostrarToast(ok ? "Agregado al carrito." : "No se pudo agregar.");
    }

    private void VerCarrito() => Nav.NavigateTo("/carrito");
    private void VerPedidos() => Nav.NavigateTo("/estadopedido");

    private void CerrarSesion()
    {
        Auth.Logout();
        Nav.NavigateTo("/login", true);
    }

    private void MostrarToast(string texto)
    {
        _toastText = texto;
        _mostrarToast = true;
        StateHasChanged();

        _toastTimer?.Stop();
        _toastTimer = new System.Timers.Timer(2000) { AutoReset = false };
        _toastTimer.Elapsed += (_, __) =>
        {
            _mostrarToast = false;
            InvokeAsync(StateHasChanged);
        };
        _toastTimer.Start();
    }

    private void CerrarToast()
    {
        _mostrarToast = false;
        _toastTimer?.Stop();
        StateHasChanged();
    }
}
