@page "/gestionpedidos"
@using MauiBlazorDelivery.Services
@using Microsoft.JSInterop

@inject AuthService Auth
@inject NavigationManager Nav
@inject PedidosService PedidosSvc
@inject IJSRuntime JS

<h2 class="mb-3">Gestión de Pedidos</h2>

@if (!string.IsNullOrEmpty(_fatalError))
{
    <div class="alert alert-danger">@_fatalError</div>
}

@if (_cargando)
{
    <div class="d-flex justify-content-center my-4">
        <div class="spinner-border" role="status"><span class="visually-hidden">Cargando...</span></div>
    </div>
}
else
{
    <div class="d-flex flex-wrap gap-2 align-items-center justify-content-between">
        <div class="d-flex flex-wrap gap-2">
            <button type="button" class="btn btn-gradient-orange" @onclick="ImprimirLista">
                Imprimir / PDF
            </button>
        </div>

        <!-- Filtro por estado + búsqueda -->
        <div class="d-flex flex-wrap gap-2 align-items-center">
            <div class="dropdownish">
                <button type="button" class="btn btn-edit-orange dropdownish-toggle" @onclick="ToggleFiltroMenu">
                    Filtrar: @_filtroTexto ▾
                </button>
                @if (_filtroMenuAbierto)
                {
                    <ul class="dropdownish-menu">
                        <li><button class="dropdownish-item" @onclick="@(() => CambiarFiltro(EstadoFiltro.Pendiente))">Pendiente</button></li>
                        <li><button class="dropdownish-item" @onclick="@(() => CambiarFiltro(EstadoFiltro.EnPreparacion))">En preparación</button></li>
                        <li><button class="dropdownish-item" @onclick="@(() => CambiarFiltro(EstadoFiltro.EnReparto))">En reparto</button></li>
                        <li><button class="dropdownish-item" @onclick="@(() => CambiarFiltro(EstadoFiltro.Entregado))">Entregado</button></li>
                        <li><button class="dropdownish-item" @onclick="@(() => CambiarFiltro(EstadoFiltro.Todos))">Todos</button></li>
                    </ul>
                }
            </div>

            <input class="form-control"
                   style="min-width:260px"
                   placeholder="Buscar por Nro/Cliente/Teléfono/Domicilio..."
                   @bind="_buscar" />
        </div>
    </div>

    <div id="print-list" class="mt-3">
        <div class="table-responsive">
            <table class="table table-hover align-middle">
                <thead>
                    <tr>
                        <th>Número</th>
                        <th>Cliente</th>
                        <th>Teléfono</th>
                        <th>Domicilio</th>
                        <th>Fecha</th>
                        <th>Estado</th>
                        <th>Total</th>
                        <th style="width:210px">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var p in Filtrados)
                    {
                        <tr class="@FilaClase(p)">
                            <td>@p.NumPedido</td>
                            <td>@($"{p.Cliente?.Nombre} {p.Cliente?.Apellido}")</td>
                            <td>@p.Cliente?.NumTelefono</td>
                            <td>@p.Cliente?.Domicilio</td>
                            <td>@p.FechaPedido.ToString("dd/MM/yyyy HH:mm")</td>
                            <td><span class="@ChipClass(p.EstadoPedido)">@p.EstadoPedido</span></td>
                            <td>$ @p.MontoTotal.ToString("N2")</td>
                            <td class="d-flex gap-2">
                                <button class="btn btn-edit-orange" @onclick="() => VerDetalle(p)">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" viewBox="0 0 16 16" style="margin-right:6px">
                                        <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8" />
                                        <path d="M8 5.5A2.5 2.5 0 1 0 8 10a2.5 2.5 0 0 0 0-4.5" />
                                    </svg>
                                    Ver
                                </button>

                                <div class="dropdownish">
                                    <button type="button"
                                            class="btn btn-gradient-orange dropdownish-toggle"
                                            @onclick="() => ToggleMenuEstado(p.NumPedido)">
                                        Estado ▾
                                    </button>
                                    @if (_menuEstadoAbiertoPara == p.NumPedido)
                                    {
                                        <ul class="dropdownish-menu">
                                            <li><button class="dropdownish-item" @onclick="@(() => AbrirConfirmEstado(p, EST_PEND))">Pendiente</button></li>
                                            <li><button class="dropdownish-item" @onclick="@(() => AbrirConfirmEstado(p, EST_PREP))">En preparación</button></li>
                                            <li><button class="dropdownish-item" @onclick="@(() => AbrirConfirmEstado(p, EST_REP))">En reparto</button></li>
                                            <li><button class="dropdownish-item" @onclick="@(() => AbrirConfirmEstado(p, EST_ENT))">Entregado</button></li>
                                        </ul>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Botones inferiores -->
    
    <div class="catalog-footer-actions mt-3 footer-safe-pad">
        <button class="btn btn-gradient-orange btn-full" @onclick="VolverPanel">Volver al panel de administrador</button>
        <button class="btn btn-gradient-red btn-full" @onclick="CerrarSesion">Cerrar sesión</button>
    </div>


}

@* ===== Modal DETALLE ===== *@
@if (_mostrarDetalle && _detalleActual is not null)
{
    <div class="modal-backdrop-custom" @onclick="CerrarDetalle"></div>

    <!-- stopPropagation evita que un click adentro cierre el modal -->
    <div class="modal-custom modal-lg" role="dialog" @onclick:stopPropagation="true">
        <div class="modal-header">
            <h5 class="modal-title">Detalle del Pedido #@_detalleActual.NumPedido</h5>
        </div>

        <div id="print-detalle">
            <div class="modal-body">
                <div class="mb-2"><strong>Cliente:</strong> @_detalleActual.Cliente?.Nombre @_detalleActual.Cliente?.Apellido</div>
                <div class="mb-2"><strong>Teléfono:</strong> @_detalleActual.Cliente?.NumTelefono</div>
                <div class="mb-2"><strong>Domicilio:</strong> @_detalleActual.Cliente?.Domicilio</div>
                <div class="mb-2"><strong>Fecha:</strong> @_detalleActual.FechaPedido.ToString("dd/MM/yyyy HH:mm")</div>
                @if (!string.IsNullOrWhiteSpace(_detalleActual.Observaciones))
                {
                    <div class="mb-2"><strong>Observaciones:</strong> @_detalleActual.Observaciones</div>
                }

                <div class="table-responsive mt-3">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Producto</th>
                                <th style="width:100px">Cant.</th>
                                <th style="width:140px">P. Unit.</th>
                                <th style="width:140px">Subtotal</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var d in _detalleActual.DetallePedidos)
                            {
                                <tr>
                                    <td>@d.Producto?.NombreProducto</td>
                                    <td>@d.Cantidad</td>
                                    <td>$ @d.PrecioUnitario.ToString("N2")</td>
                                    <td>$ @d.Subtotal.ToString("N2")</td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="3" class="text-end"><strong>Total</strong></td>
                                <td><strong>$ @_detalleActual.MontoTotal.ToString("N2")</strong></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>

        <div class="modal-footer">
            <button class="btn btn-pill btn-grad-cancelar-modal" @onclick="CerrarDetalle">Cerrar</button>
            <button class="btn btn-pill btn-grad-confirmar" @onclick="ImprimirDetalle">Imprimir / PDF</button>
        </div>
    </div>
}

@* ===== Modal confirmar CAMBIO DE ESTADO ===== *@
@if (_confirmarEstadoPara is not null)
{
    <div class="modal-backdrop-custom" @onclick="CerrarConfirmEstado"></div>

    <div class="modal-custom" role="dialog" @onclick:stopPropagation="true">
        <div class="modal-header">
            <h5 class="modal-title">Cambiar estado</h5>
        </div>
        <div class="modal-body">
            <p>¿Cambiar el estado del pedido <strong>#@_confirmarEstadoPara.NumPedido</strong> a
               <strong>@_nuevoEstadoDeseado</strong>?</p>

            @if (!string.IsNullOrEmpty(_errorEstado))
            {
                <div class="alert alert-danger">@_errorEstado</div>
            }
        </div>
        <div class="modal-footer">
            <button class="btn btn-pill btn-grad-cancelar-modal" @onclick="CerrarConfirmEstado">No, cancelar</button>
            <button class="btn btn-pill btn-grad-confirmar" @onclick="CambiarEstadoConfirmadoAsync">Sí, cambiar</button>
        </div>
    </div>
}

@* ===== Toast ===== *@
@if (_mostrarToast)
{
    <div class="app-toast">
        <div class="app-toast-body">
            <div class="app-toast-title">Éxito</div>
            @_toastText
        </div>
        <button class="app-toast-close" @onclick="CerrarToast">×</button>
    </div>
}

@code {
    private string? _fatalError;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!Auth.EstaLogueado || !Auth.EsAdmin)
            {
                Nav.NavigateTo("/login");
                return;
            }
            await CargarAsync();
        }
        catch (Exception ex)
        {
            _fatalError = $"Error al inicializar GestionPedidos: {ex.Message}";
            Console.WriteLine(ex);
        }
    }

    private string ChipClass(string estado)
    {
        if (string.Equals(estado, EST_PEND, StringComparison.OrdinalIgnoreCase)) return "chip chip-pendiente";
        if (string.Equals(estado, EST_PREP, StringComparison.OrdinalIgnoreCase)) return "chip chip-prep";
        if (string.Equals(estado, EST_REP, StringComparison.OrdinalIgnoreCase)) return "chip chip-reparto";
        if (string.Equals(estado, EST_ENT, StringComparison.OrdinalIgnoreCase)) return "chip chip-entregado";
        return "chip";
    }

    private const string EST_PEND = "Pendiente";
    private const string EST_PREP = "En preparación";
    private const string EST_REP = "En reparto";
    private const string EST_ENT = "Entregado";

    private List<PedidosService.PedidoDto> _pedidos = new();
    private bool _cargando = true;

    private enum EstadoFiltro { Pendiente, EnPreparacion, EnReparto, Entregado, Todos }
    private EstadoFiltro _filtro = EstadoFiltro.Pendiente;
    private bool _filtroMenuAbierto = false;
    private string _buscar = string.Empty;
    private string _filtroTexto => _filtro switch
    {
        EstadoFiltro.Pendiente => EST_PEND,
        EstadoFiltro.EnPreparacion => EST_PREP,
        EstadoFiltro.EnReparto => EST_REP,
        EstadoFiltro.Entregado => EST_ENT,
        _ => "Todos"
    };

    private int? _menuEstadoAbiertoPara = null;

    private bool _mostrarDetalle = false;
    private PedidosService.PedidoDto? _detalleActual;

    private PedidosService.PedidoDto? _confirmarEstadoPara;
    private string _nuevoEstadoDeseado = "";
    private string? _errorEstado;

    private bool _mostrarToast = false;
    private string _toastText = "Operación exitosa.";
    private System.Timers.Timer? _toastTimer;

    private async Task CargarAsync()
    {
        try
        {
            _cargando = true;
            _pedidos = await PedidosSvc.GetPedidosAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            _pedidos = new();
            MostrarToast("No se pudieron cargar los pedidos.");
        }
        finally
        {
            _cargando = false;
            StateHasChanged();
        }
    }

    private IEnumerable<PedidosService.PedidoDto> Filtrados
        => _pedidos.Where(p => CoincideFiltro(p) && CoincideBusqueda(p));

    private bool CoincideFiltro(PedidosService.PedidoDto p) => _filtro switch
    {
        EstadoFiltro.Pendiente => p.EstadoPedido.Equals(EST_PEND, StringComparison.OrdinalIgnoreCase),
        EstadoFiltro.EnPreparacion => p.EstadoPedido.Equals(EST_PREP, StringComparison.OrdinalIgnoreCase),
        EstadoFiltro.EnReparto => p.EstadoPedido.Equals(EST_REP, StringComparison.OrdinalIgnoreCase),
        EstadoFiltro.Entregado => p.EstadoPedido.Equals(EST_ENT, StringComparison.OrdinalIgnoreCase),
        EstadoFiltro.Todos => true,
        _ => true
    };

    private bool CoincideBusqueda(PedidosService.PedidoDto p)
    {
        if (string.IsNullOrWhiteSpace(_buscar)) return true;
        var t = _buscar.Trim().ToLowerInvariant();
        return
            p.NumPedido.ToString().Contains(t) ||
            (p.Cliente?.Nombre?.ToLowerInvariant().Contains(t) ?? false) ||
            (p.Cliente?.Apellido?.ToLowerInvariant().Contains(t) ?? false) ||
            (p.Cliente?.NumTelefono?.ToLowerInvariant().Contains(t) ?? false) ||
            (p.Cliente?.Domicilio?.ToLowerInvariant().Contains(t) ?? false);
    }

    private string FilaClase(PedidosService.PedidoDto p)
        => p.EstadoPedido.Equals(EST_ENT, StringComparison.OrdinalIgnoreCase) ? "row-entregado" : "";

    private void ToggleFiltroMenu() => _filtroMenuAbierto = !_filtroMenuAbierto;
    private void CambiarFiltro(EstadoFiltro f) { _filtro = f; _filtroMenuAbierto = false; }

    private void ToggleMenuEstado(int numPedido)
        => _menuEstadoAbiertoPara = _menuEstadoAbiertoPara == numPedido ? null : numPedido;

    private void VerDetalle(PedidosService.PedidoDto p) { _detalleActual = p; _mostrarDetalle = true; }
    private void CerrarDetalle() { _mostrarDetalle = false; _detalleActual = null; }

    private void AbrirConfirmEstado(PedidosService.PedidoDto p, string nuevoEstado)
    {
        _menuEstadoAbiertoPara = null;
        _confirmarEstadoPara = p;
        _nuevoEstadoDeseado = nuevoEstado;
        _errorEstado = null;
    }
    private void CerrarConfirmEstado() { _confirmarEstadoPara = null; _nuevoEstadoDeseado = ""; _errorEstado = null; }

    private async Task CambiarEstadoConfirmadoAsync()
    {
        if (_confirmarEstadoPara is null) return;

        try
        {
            var ok = await PedidosSvc.CambiarEstadoAsync(_confirmarEstadoPara.NumPedido, _nuevoEstadoDeseado);
            if (!ok)
            {
                _errorEstado = "No se pudo actualizar el estado.";
                StateHasChanged();
                return;
            }

            var p = _pedidos.FirstOrDefault(x => x.NumPedido == _confirmarEstadoPara.NumPedido);
            if (p is not null) p.EstadoPedido = _nuevoEstadoDeseado;

            CerrarConfirmEstado();
            MostrarToast("Estado actualizado correctamente.");
        }
        catch (Exception ex)
        {
            _errorEstado = ex.Message;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task ImprimirLista() => await JS.InvokeVoidAsync("mauiPrintHelper.printWithClass", "print-list");
    private async Task ImprimirDetalle() => await JS.InvokeVoidAsync("mauiPrintHelper.printWithClass", "print-detalle");

    private void MostrarToast(string texto)
    {
        _toastText = texto;
        _mostrarToast = true;
        StateHasChanged();

        _toastTimer?.Stop();
        _toastTimer = new System.Timers.Timer(2500) { AutoReset = false };
        _toastTimer.Elapsed += (_, __) =>
        {
            _mostrarToast = false;
            InvokeAsync(StateHasChanged);
        };
        _toastTimer.Start();
    }
    private void CerrarToast()
    {
        _mostrarToast = false;
        _toastTimer?.Stop();
        StateHasChanged();
    }

    private void VolverPanel() => Nav.NavigateTo("/paneladmin");
    private void CerrarSesion() { Auth.Logout(); Nav.NavigateTo("/login", true); }
}
